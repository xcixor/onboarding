datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum Role {
  USER
  COACH
  STAFF
  ADMIN
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  oldEmail    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle    String?
  bio         String?
  linkedIn    String?
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  profile       Profile?

  isVerified                Boolean   @default(false)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  Survey                    Survey[]

  @@map("users")
}

model Event {
  id          String  @id @default(uuid())
  title       String
  description String
  slug        String?
  isActive    Boolean @default(false)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  startDate DateTime?
  endDate   DateTime?
}

model Attendee {
  id          String  @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  company     String?
}

model Attendance {
  id      String @id @default(uuid())
  eventId String

  attendeeId String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  timeSlot  String?
  confirmed Boolean @default(false)

  @@unique([eventId, attendeeId])
}

model GCPData {
  id               String   @id @default(cuid())
  urlExpiryDate    DateTime
  blobName         String
  assetId          String   @unique
  assetName        String
  assetType        String
  validityDuration Int      @default(7)
  downloadUrl      String
}

model Survey {
  id          String           @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  published   Boolean          @default(false)
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdById String
  questions   Question[]
  responses   SurveyResponse[]

  @@index([createdById])
}

model Question {
  id          String               @id @default(cuid())
  survey      Survey               @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId    String
  title       String
  type        QuestionType
  required    Boolean              @default(false)
  order       Int
  explanation QuestionExplanation?
  options     QuestionOption[]
  validation  QuestionValidation?
  logic       QuestionLogic[]
  answers     QuestionAnswer[]

  @@index([surveyId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TEXT
  LONG_TEXT
  EMAIL
  NUMBER
  DATE
  TIME
  PHONE
  RATING
  FILE_UPLOAD
  CHECKBOX
}

model QuestionOption {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  order      Int

  @@index([questionId])
}

model QuestionExplanation {
  id         String     @id @default(cuid())
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String     @unique
  text       String
  mediaUrl   String?
  mediaType  MediaType?

  @@index([questionId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model QuestionValidation {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique
  rules      Json // Stored as array of ValidationRule objects

  @@index([questionId])
}

model QuestionLogic {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  conditions Json // Stored as array of LogicCondition objects
  action     Json // Stored as LogicAction object

  @@index([questionId])
}

model SurveyResponse {
  id           String           @id @default(cuid())
  survey       Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId     String
  respondentId String?
  submittedAt  DateTime         @default(now())
  answers      QuestionAnswer[]

  @@index([surveyId])
}

model QuestionAnswer {
  id               String         @id @default(cuid())
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  surveyResponse   SurveyResponse @relation(fields: [surveyResponseId], references: [id], onDelete: Cascade)
  surveyResponseId String
  value            String // Stored as string, converted to appropriate type in application

  @@index([questionId])
  @@index([surveyResponseId])
}
